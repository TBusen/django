{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Starting a New Project","text":""},{"location":"#set-up-virtual-environment","title":"Set up virtual environment","text":"<pre><code>conda create --name python=3.11\n</code></pre> <p>Now activate the environment and install required packages</p> <pre><code>conda activate &lt;name&gt;\n</code></pre>"},{"location":"#create-new-project","title":"Create new Project","text":"<p>Use Django Admin to create a new project</p> <pre><code>django-admin startproject &lt;name&gt;\n</code></pre> <p>This creates the project level directory and file structure which includes the site level manage.py and site level urls.py and settings.py.  The directory structure is </p> <pre><code>|-- site_name\n    |-- site_name\n    |   |-- files\n    |-- manage.py\n</code></pre> <p>CD into the new site directory and create application </p> <pre><code>cd site_name\n</code></pre> <p><pre><code>python manage.py startapp &lt;app_name&gt;\n</code></pre> We've now added the structure </p> <pre><code>|-- site_name\n   |-- site_name\n   |   |-- files\n   |-- manage.py\n   |-- app_name\n       |-- models.py\n       |-- views.py\n       |- tests.py\n</code></pre>"},{"location":"#setting-up-application","title":"Setting up application","text":"<p>Setting up the application requires adding the following to the standard configuration from startapp</p> <p>Create New templates directory and html files under app_name</p> <pre><code>|-- site_name\n   |-- site_name\n   |   |-- files\n   |-- manage.py\n   |-- app_name\n       |-- templates\n       |   |-- app_name\n       |        |-- home.html\n       |-- models.py\n       |-- views.py\n       |-- tests.py\n</code></pre> <p>For this example we will use home.html as a landing page which is now in our templates folder.  We need to create and connect your view to this template.</p> <p>Inside the template we put a simple html string to render</p> <pre><code>&lt;h1&gt;Welcome to home.html&lt;/h1&gt;\n</code></pre> <p>Inside our application views.py  we create a simple function-based view to render this template.</p> <pre><code>def home_view(request):\n    return render(request, 'classroom/home.html')\n</code></pre> <p>This function takes in a request and from django.shortcuts returns the rednderign of the request and points to 'classroom/home.html' which is in app_name/templates/app_name/</p> <p>With the new view created we now need a urls.py file at the application level.</p> <pre><code>|-- site_name\n   |-- site_name\n   |   |-- files\n   |-- manage.py\n   |-- app_name\n       |-- templates\n       |   |-- app_name\n       |        |-- home.html\n       |-- models.py\n       |-- views.py\n       |-- tests.py\n       |-- urls.py\n</code></pre> <pre><code>from django.urls import path\nfrom .views import home_view\n\napp_name = 'classroom'\n\nurlpatterns = [\n    path('', home_view, name='home')\n]\n</code></pre> <p>A couple things to note here:</p> <ul> <li>The view must be imported</li> <li>The app_name must be registered</li> <li>The path function expects a function (home_view)</li> <li>py specifying '' this will route to domain.com/classroom/</li> </ul> <p>We now need to connect our application level urls.py to the project (site) level urls.py</p> <pre><code>|-- site_name\n   |-- site_name\n   |   |-- urls.py\n</code></pre> <pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path('classroom/', include('classroom.urls'))\n]\n</code></pre> <p>We need to add the import of include.  Add to the urlpatterns list a new path indicating the routing of domain.com/classroom/ should reference classroom.urls which is referenced by the registered app_name classroom and will point to the application level urls.py, which now points to the home_view.</p> <p>Next register the application config in the site level settings.py.  This name can be found in the application-level apps.py</p> <p>In this file we see this</p> <pre><code>class ClassroomConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"classroom\"\n</code></pre> <p>Copy and paste the name ClassroomConfig and then register this in site_name/settings.py under INSTALLED_APPS</p> <p>ClassroomConfig</p> <p><pre><code>INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n]\n</code></pre> add the following <pre><code>'classroom.apps.ClassroomConfig'\n</code></pre> <pre><code>INSTALLED_APPS = [\n    'classroom.apps.ClassroomConfig',\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n]\n</code></pre></p>"},{"location":"#create-the-model","title":"Create the model","text":"<p>We now want to create a model representing a teach.  This model is what will interact with our database.</p> <p>The modified file is here:</p> <pre><code>|-- site_name\n   |-- site_name\n   |   |-- files\n   |-- manage.py\n   |-- app_name\n       |-- templates\n       |   |-- app_name\n       |        |-- home.html\n       |-- models.py\n</code></pre> <pre><code>from django.db import models\n\n\n# Create your models here.\nclass Teacher(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n    subject = models.CharField(max_length=30)\n\n    def __str__(self) -&gt; str:\n        return f\"{self.first_name} {self.last_name} teaches {self.subject}\"\n</code></pre> <p>Give the model the attributes of first_name, last_name, and subject.  Add a string method to represent teacher.</p> <p>With the new class defined we need to make migration and migrate for it to be reflected in the database.</p> <pre><code>python manage.py makemigrations\n</code></pre> <p>This only preps the migrations, it doesn't actually persist anything yet.</p> <pre><code>python manage.py migrate\n</code></pre> <p>Now it is migrated.</p> <p>Undetected Migrations</p> <p>If your application name is not defined under INSTALLED_APPS in settings.py then any changes will not be picked up with the above commands.</p> <p>Verify that home.html is displaying by starting the dev server</p> <pre><code>python manage.py runserver 8080\n</code></pre>"},{"location":"#generic-views","title":"Generic Views","text":"<p>Some views are very common and for those Django has generic views.  The work is repetitive (link view to template).  One of those views is template view.</p> <p><pre><code>from django.shortcuts import render\nfrom django.views.generic import TemplateView\n\n\n# Create your views here.\n# def home_view(request):\n#     return render(request, \"classroom/home.html\")\n\n\nclass HomeView(TemplateView):\n    template_name = \"classroom/home.html\"\n</code></pre> import the TemplateView class from django.  This is what your class-based view inherits.  What is required is to set the template_name variable to the template location.  There isn't much difference compared to the function-based view above in terms of simplicity, but the advantages will become more evident later.  </p> <p>We have to now register this new class view with urls.py so that it can render</p> <pre><code>from django.urls import path\n#from .views import home_view\nfrom .views import HomeView\n\napp_name = \"classroom\"\n\nurlpatterns = [\n    #path(\"\", home_view, name=\"home\")\n    path(\"\", HomeView.as_view(), name=\"home\")\n    ]\n</code></pre> <p>Import the class inot urls.py.  Since path expects a function we just have to call the as_view method on the class to satisfy this.</p> <p>Assuming a thank you page is created, how do we reference other pages?</p> <p>Inside our home.html:</p> <pre><code>&lt;h1&gt;Welcome to home.html&lt;/h1&gt;\n\n&lt;ul&gt;\n    &lt;li&gt;\n        &lt;a href=\"{%url \"classroom:thank_you\"%}\"&gt;Thank You Page Link&lt;/a&gt;\n    &lt;/li&gt;\n&lt;/us&gt;\n</code></pre> <p>Using django templating, we use the %url magic.  \"classroom:thank_you\" is what we registered the thank you view under in url.py</p> <pre><code>from django.urls import path\n\n# from .views import home_view\nfrom .views import HomeView, ThankYou\n\napp_name = \"classroom\"\n\nurlpatterns = [\n    # path(\"\", home_view, name=\"home\")\n    path(\"\", HomeView.as_view(), name=\"home\"),\n    path(\"thank_you\", ThankYou.as_view(), name=\"thank_you\"),\n]\n</code></pre> <p>TemplateView Usage</p> <p>TemplateView should really only be used when we expect most of the work to be done on the template side of things ie in the html</p>"}]}